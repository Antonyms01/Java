package pack;

//package pack;
//
//
//import java.io.IOException;
//
//public class Demo
//{
//	void disp3()throws IOException
//	{
//		int num=20;
//		if(num>10)
//		{
//			throw new IOException();
//		}
//	}
//	void disp2()throws IOException
//	{
//		disp3();
//	}
//	void disp1()throws IOException
//	{
//		disp2();
//	}
//	public static void main(String args[]) throws IOException
//	{
//		Demo j=new Demo();
//		j.disp1(); // compilation error : add throws or try_catch
//	}
//}





//1) define a functional interface "First" with an abstract method "void disp1()" , default method
//"void disp2()" and a static method "void disp3()"
//
//inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
//also invoke "disp3()" method inside main.



//interface First
//
//{
//	void disp1();
//	
//	default void disp2()
//	{
//		System.out.println("In Default disp2");
//	}
//	
//	static void disp3()
//	{
//		System.out.println("In static disp3");
//	}
//}
//
//public class Demo
//{
//	public static void main(String[] args) {
//		First ref=()->System.out.println("disp1");
//		ref.disp1();
//		ref.disp2();
//		First.disp3();
//	}	
//}




//
//2) define a functional interface "Second" with an abstract method "void disp4()".
//
//define a class Demo with main function.
//inside main function create two implementations of "Second" using lambda expression and display their names.


//
//interface Second{
//	//String method(name);
//	void disp4();			//Functional Inteface
//}
//
//public class Demo
//{
//	public static void main(String[] args) {
//		Second ref=()->System.out.println("Inside Second Implementation of disp4()");
//		
//		System.out.println(ref.getClass().getName());
//		Second ref1=()->System.out.println("Inside Second Implementation of disp4()");
//		System.out.println(ref.getClass().getName());
//		ref.disp4();	
//		ref1.disp4();
//		
//	}
//}


//
//
//3) define a functional interface "MyInterface" with an abstract method "void fun()"
//
//define a class Demo with two functions "static void perform" and main.
//
//from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.


interface Myinterface
{
	void fun();
}


public class Demo
{
	static void perform(Myinterface ref)
	{
		ref.fun();
	}
	public static void main(String[] args) {
		perform(()->{System.out.println("Inside fun()");});
	}
}
